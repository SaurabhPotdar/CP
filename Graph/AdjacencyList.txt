package com.cg;

import java.util.LinkedList;
import java.util.List;

public class Graph {

	public int noOfVertices;
	public List<Integer> adjacencyList[]; // Creates an array of List. Otherwise use List<List<Integer>> adjList

	@SuppressWarnings("unchecked")
	public Graph(int noOfVertices) {
		this.noOfVertices = noOfVertices;
		adjacencyList = new LinkedList[noOfVertices]; // Create an outer list of size noOfVertices
		for (int i = 0; i < noOfVertices; i++) {
			adjacencyList[i] = new LinkedList<Integer>();
		}
	}

	public void addEdge(int source, int destination) {
		adjacencyList[source].add(destination); // [] to access outerlist, then add to the linked list

		adjacencyList[destination].add(source); // For undirected graph
	}

	public void printGraph(){
		for (int i = 0; i <noOfVertices ; i++) {
			if(adjacencyList[i].size()>0) {
				System.out.print("Vertex " + i + " is connected to: ");
	            for (int j = 0; j < adjacencyList[i].size(); j++) {
	            	System.out.print(adjacencyList[i].get(j) + " ");
	            }
	            System.out.println();
	        }
		}
	}

	public static void main(String args[]) {
		Graph graph = new Graph(5); // Create graph with 5 vertices
		graph.addEdge(0, 1);
		graph.addEdge(0, 4);
		graph.addEdge(1, 2);
		graph.addEdge(1, 3);
		graph.addEdge(1, 4);
		graph.addEdge(2, 3);
		graph.addEdge(3, 4);
		graph.printGraph();
	}

}
